
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Flag, ThumbsUp, ThumbsDown, BookOpen } from "lucide-react";

interface QuestionFeedbackProps {
  questionId: string;
  questionSource?: string;
  verificationStatus?: "verified" | "pending" | "flagged";
  onFeedback?: (questionId: string, feedback: string, type: "positive" | "negative" | "error") => void;
}

export const QuestionFeedback = ({ 
  questionId, 
  questionSource, 
  verificationStatus = "pending",
  onFeedback 
}: QuestionFeedbackProps) => {
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackText, setFeedbackText] = useState("");
  const [feedbackType, setFeedbackType] = useState<"positive" | "negative" | "error">("positive");

  const handleSubmitFeedback = () => {
    if (feedbackText.trim() && onFeedback) {
      onFeedback(questionId, feedbackText, feedbackType);
      setFeedbackText("");
      setShowFeedback(false);
    }
  };

  const getVerificationBadge = () => {
    switch (verificationStatus) {
      case "verified":
        return <Badge variant="default" className="bg-success text-success-foreground">‚úì –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–º</Badge>;
      case "flagged":
        return <Badge variant="destructive">‚ö† –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</Badge>;
      default:
        return <Badge variant="secondary">üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ò–ò</Badge>;
    }
  };

  return (
    <Card className="mt-4 border-muted">
      <CardContent className="p-4">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            {getVerificationBadge()}
            {questionSource && (
              <Badge variant="outline" className="text-xs">
                <BookOpen className="w-3 h-3 mr-1" />
                {questionSource}
              </Badge>
            )}
          </div>
          
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => {
                setFeedbackType("positive");
                setShowFeedback(!showFeedback);
              }}
              className="h-8 px-2"
            >
              <ThumbsUp className="w-4 h-4" />
            </Button>
            
            <Button
              variant="ghost"
              size="sm"
              onClick={() => {
                setFeedbackType("negative");
                setShowFeedback(!showFeedback);
              }}
              className="h-8 px-2"
            >
              <ThumbsDown className="w-4 h-4" />
            </Button>
            
            <Button
              variant="ghost"
              size="sm"
              onClick={() => {
                setFeedbackType("error");
                setShowFeedback(!showFeedback);
              }}
              className="h-8 px-2 text-destructive hover:text-destructive"
            >
              <Flag className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {showFeedback && (
          <div className="space-y-3">
            <div className="text-sm text-muted-foreground">
              {feedbackType === "positive" && "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ:"}
              {feedbackType === "negative" && "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:"}
              {feedbackType === "error" && "–û–ø–∏—à–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É:"}
            </div>
            
            <Textarea
              value={feedbackText}
              onChange={(e) => setFeedbackText(e.target.value)}
              placeholder="–í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏..."
              className="min-h-[80px]"
            />
            
            <div className="flex gap-2">
              <Button
                onClick={handleSubmitFeedback}
                disabled={!feedbackText.trim()}
                variant="bio"
                size="sm"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
              </Button>
              <Button
                onClick={() => setShowFeedback(false)}
                variant="ghost"
                size="sm"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        )}

        <div className="mt-3 text-xs text-muted-foreground">
          üí° –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥–∞—é—Ç —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
        </div>
      </CardContent>
    </Card>
  );
};
